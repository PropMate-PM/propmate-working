create table if not exists admin_roles ( id uuid primary key default gen_random_uuid(), user_id uuid unique not null references auth.users(id) on delete cascade, role text not null check (role in ('super_admin','admin','moderator')), is_active boolean default true, granted_by uuid references auth.users(id), granted_at timestamptz default now(), created_at timestamptz default now(), updated_at timestamptz default now() ); alter table admin_roles enable row level security; drop policy if exists Super_admins_manage_admin_roles on admin_roles; create policy Super_admins_manage_admin_roles on admin_roles for all to authenticated using ( exists ( select 1 from admin_roles ar where ar.user_id = auth.uid() and ar.role = 'super_admin' and ar.is_active = true ) ) with check ( exists ( select 1 from admin_roles ar where ar.user_id = auth.uid() and ar.role = 'super_admin' and ar.is_active = true ) ); drop policy if exists Users_read_own_admin_role on admin_roles; create policy Users_read_own_admin_role on admin_roles for select to authenticated using ( user_id = auth.uid() ); create or replace function is_admin(user_uuid uuid) returns boolean language plpgsql security definer as cat begin return exists ( select 1 from admin_roles where user_id = user_uuid and is_active = true ); end; cat; create or replace function get_admin_role(user_uuid uuid) returns text language plpgsql security definer as cat declare user_role text; begin select role into user_role from admin_roles where user_id = user_uuid and is_active = true; return coalesce(user_role, 'user'); end; cat; insert into admin_roles (user_id, role, is_active) select id, 'admin', true from auth.users where email in ('admin@propermat.site','admin@progmed.site','admin@propmate.com','admin@propmate.site') on conflict (user_id) do update set role = excluded.role, is_active = excluded.is_active, updated_at = now(); alter table cashback_submissions enable row level security; drop policy if exists Users_read_own_submissions on cashback_submissions; create policy Users_read_own_submissions on cashback_submissions for select to authenticated using ( user_id = auth.uid() ); drop policy if exists Users_insert_own_submissions on cashback_submissions; create policy Users_insert_own_submissions on cashback_submissions for insert to authenticated with check ( user_id = auth.uid() ); drop policy if exists Admins_read_all_submissions on cashback_submissions; create policy Admins_read_all_submissions on cashback_submissions for select to authenticated using ( exists ( select 1 from admin_roles ar where ar.user_id = auth.uid() and ar.is_active = true ) ); drop policy if exists Admins_update_submissions on cashback_submissions; create policy Admins_update_submissions on cashback_submissions for update to authenticated using ( exists ( select 1 from admin_roles ar where ar.user_id = auth.uid() and ar.is_active = true ) ) with check ( exists ( select 1 from admin_roles ar where ar.user_id = auth.uid() and ar.is_active = true ) );
